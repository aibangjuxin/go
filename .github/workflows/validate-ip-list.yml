name: Validate IP List in Pull Request

on:
  pull_request:
    branches: [ main ]
    paths:
      - '**/api_list.yaml'  # 只匹配 api_list.yaml 文件

permissions:
  issues: write        # 允许在 PR 上添加评论
  pull-requests: write # 允许操作 PR
  contents: read       # 允许读取仓库内容

jobs:
  validate-ip:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以比较差异

      - name: Find modified api_list.yaml files
        id: find-files
        run: |
          # 查找 PR 中修改的 api_list.yaml 文件
          modified_files=$(git diff --name-only origin/main...HEAD | grep 'api_list.yaml' || true)
          if [ -z "$modified_files" ]; then
            echo "No api_list.yaml files modified in this PR."
            echo "files=" >> $GITHUB_OUTPUT
          else
            echo "Found modified api_list.yaml files: $modified_files"
            echo "files=$modified_files" >> $GITHUB_OUTPUT
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ipaddress

      - name: Run IP validator
        id: validate
        if: steps.find-files.outputs.files != ''
        run: |
          # 初始化结果文件
          echo "[]" > all_results.json
          exit_code=0
          # 对每个修改的 api_list.yaml 文件运行验证
          for file in ${{ steps.find-files.outputs.files }}; do
            echo "Validating $file"
            if python ip_validator.py "$file" --json-output > "results-$(basename $file).json"; then
              echo "Validation succeeded for $file"
            else
              echo "Validation failed for $file"
              exit_code=1
            fi
            # 合并结果到 all_results.json
            jq -s '.[0] + [.[1]]' all_results.json "results-$(basename $file).json" > temp.json
            mv temp.json all_results.json
            cat "results-$(basename $file).json"
          done
          # 保存最终退出码
          echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Parse validation results
        id: parse
        if: steps.find-files.outputs.files != ''
        run: |
          # 解析所有验证结果
          comment_body="### IP Validation Results\n\n"
          all_suggestions=""
          all_status="success"
          # 遍历 all_results.json 中的每个文件结果
          length=$(jq 'length' all_results.json)
          for i in $(seq 0 $((length-1))); do
            file=$(jq -r ".[$i].file" all_results.json)
            status=$(jq -r ".[$i].status" all_results.json)
            message=$(jq -r ".[$i].message" all_results.json)
            suggestions=$(jq -r ".[$i].suggestions | join(\"\n- \")" all_results.json)
            comment_body+="**File**: $file\n**Status**: $status\n**Message**: $message\n"
            if [ -n "$suggestions" ]; then
              comment_body+="**Suggestions**:\n- $suggestions\n\n"
              all_suggestions+="- $file: $suggestions\n"
            else
              comment_body+="**Suggestions**: None\n\n"
            fi
            if [ "$status" != "success" ]; then
              all_status="warning"
            fi
          done
          echo "comment_body<<EOF" >> $GITHUB_OUTPUT
          echo "$comment_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "all_status=$all_status" >> $GITHUB_OUTPUT
          echo "all_suggestions<<EOF" >> $GITHUB_OUTPUT
          echo "$all_suggestions" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: steps.find-files.outputs.files != '' && steps.validate.outputs.exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `${{ steps.parse.outputs.comment_body }}`;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Set check status
        if: steps.find-files.outputs.files != '' && steps.validate.outputs.exit_code != '0'
        run: |
          echo "Validation failed for one or more api_list.yaml files:"
          echo "${{ steps.parse.outputs.all_suggestions }}"
          exit 1

      - name: No action needed
        if: steps.find-files.outputs.files == ''
        run: |
          echo "No api_list.yaml files were modified. Skipping validation."
